# Blubber generates repeatable and consistent Dockerfiles
# using multi stage docker images.
# Each variant renders a different Dockerfile.
# https://github.com/wikimedia/blubber
version: v3
base: docker-registry.wikimedia.org/nodejs10-slim
lives:
  in: /srv/service
runs:
  environment:
    APP_BASE_PATH: /srv/service

variants:
  # Base build image the other variants start from this.
  build:
    base: docker-registry.wikimedia.org/nodejs10-devel
    apt: { packages: [git, build-essential, python-dev, librdkafka-dev] }
    builder:
      # Clone Wikimedia schema repositories into /srv/service/schemas
      # If you update the schema repository, you'll need to update
      # the SHAs that are checked out here, and then rebuild docker images.
      command:
        - mkdir /srv/service/schemas && git clone --single-branch -- https://gerrit.wikimedia.org/r/mediawiki/event-schemas /srv/service/schemas/mediawiki-event-schemas && cd /srv/service/schemas/mediawiki-event-schemas && git reset --hard 50e0a82
    node: { requirements: [package.json] }
    runs:
      environment:
        BUILD_LIBRDKAFKA: "0"
        LINK: g++
  # Runs npm test
  test:
    includes: [build]
    entrypoint: [npm, test]
    runs: { insecurely: true }
  # Same as production, but includes build artifacts and extra packages for debugging.
  development:
    includes: [build]
    apt: { packages: [librdkafka1, librdkafka++1, kafkacat, telnet, iputils-ping, procps, curl, vim] }
    runs: { insecurely: true }
    entrypoint: [node, server.js]
  # prep is used for copying from build to remove build artifacts
  # from the production image.
  prep:
    includes: [build]
    node: { env: production }
  production:
    copies: prep
    apt: { packages: [librdkafka1, librdkafka++1] }
    node: { env: production }
    runs: { environment: { UV_THREADPOOL_SIZE: "128" } }
    entrypoint: [node, server.js]
