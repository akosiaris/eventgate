#!/usr/bin/env node
'use strict';

/**
 * A quick and dirty file to check the health of the /v1/events route.
 * Run with --help to get usage.
 * This can post events from a file URL or use JSONSchema event examples from a schema URL.
 * This will exit 0 if success, exit 1 if failure, or exit 2 if event  could not be POSTed
 */

const _ = require('lodash');
const preq = require('preq');
const yargs = require('yargs');
const urlGetObject = require('../lib/event-util').urlGetObject;

/**
 * POSTs events to the provide event service URL. This will write
 * to stdout and process.exit according to the result or error.
 * @param {string} serviceUrl event serivce URL
 * @param {Object|Array} events events to POST
 * @return {undefined}
 */
function postEvents(serviceUrl, events) {
    return preq.post({
        uri: serviceUrl,
        headers: {
            'content-type': 'application/json'
        },
        body: events
    })
    .then((res) => {
        if (res.status <= 202) {
            console.log(res.status);
            process.exit(0);
        } else {
            // Rethrow anything > 202 as an error.  (207 means events were partially accepeted.)
            throw res;
        }
    })
    .catch((err) => {
        console.log(err.status);
        console.dir(err.body, { depth: null });
        process.exit(1);
    });
}

/**
 * Sets dtField on each event to current ISO-8601 datetime string.
 * @param {string} dtField field path to set
 * @param {Array} events events to set dtField on.
 * @return {Array}
 */
function setDt(dtField, events) {
    const currentDt = new Date().toISOString();
    return _.map(events, (event) => {
        return _.set(event, dtField, currentDt);
    });
}

// eslint-disable-next-line no-unused-expressions
yargs
.option('service-url', {
    alias: 'u',
    type: 'string',
    describe: 'EventGate service url',
    default: 'http://localhost:8192/v1/events'
})
.option('dt-field', {
    alias: 'd',
    type: 'string',
    describe: 'If given, set this field in the events to have a current ISO-8601 date time string',
})
.usage('Usage:\n  $0 [options] examples <schema_url>\n  $0 [options] events <events_url>\n')
.command('examples [schema_url]', 'Post the events in the `examples` field in the given schema_url',
    (yargs_command) => {
        yargs_command.positional('schema_url', {
            'type': 'string',
            'describe': 'schema URL to get event example from.  If not given, stdin will be used.',
            'default': '/dev/stdin'
        });
    },
    async(args) => {
        const schema = await urlGetObject(args.schema_url);

        if (!schema.examples) {
            console.log(`Schema ${schema.$id} does not have any examples. Aborting.`);
            process.exit(2);
        }
        let events = schema.examples;

        // If given --dt-field, set it now to the current datetime.
        if (args.dtField) {
            events = setDt(args.dtField, events);
        }
        process.stdout.write(`Posting ${events.length} ${schema.$id} examples to ${args.serviceUrl}... `);
        return postEvents(args.serviceUrl, events);
    }
)
.command('events [events_url]', 'Post the events in events_url file',
    (yargs_command) => {
        yargs_command.positional('events_url', {
            'type': 'string',
            'describe': 'URL to get event(s) from. If not given, stdin will be used.',
            'default': '/dev/stdin'
        });
    },
    async(args) => {
        let events = await urlGetObject(args.events_url);
        events = _.isArray(events) ? events : [events];

        // If given --dt-field, set it now to the current datetime.
        if (args.dtField) {
            events = setDt(args.dtField, events);
        }
        process.stdout.write(`Posting ${events.length} events from ${args.events_url} to ${args.serviceUrl}... `);
        await postEvents(args.serviceUrl, events);
    }
)
.help()
.argv;





